/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BlankRouteImport } from './routes/blank'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DevMemoRouteImport } from './routes/dev/memo'
import { Route as DevAsyncRenderingRouteImport } from './routes/dev/async-rendering'

const BlankRoute = BlankRouteImport.update({
  id: '/blank',
  path: '/blank',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DevMemoRoute = DevMemoRouteImport.update({
  id: '/dev/memo',
  path: '/dev/memo',
  getParentRoute: () => rootRouteImport,
} as any)
const DevAsyncRenderingRoute = DevAsyncRenderingRouteImport.update({
  id: '/dev/async-rendering',
  path: '/dev/async-rendering',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/dev/async-rendering': typeof DevAsyncRenderingRoute
  '/dev/memo': typeof DevMemoRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/dev/async-rendering': typeof DevAsyncRenderingRoute
  '/dev/memo': typeof DevMemoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blank': typeof BlankRoute
  '/dev/async-rendering': typeof DevAsyncRenderingRoute
  '/dev/memo': typeof DevMemoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/blank' | '/dev/async-rendering' | '/dev/memo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blank' | '/dev/async-rendering' | '/dev/memo'
  id: '__root__' | '/' | '/blank' | '/dev/async-rendering' | '/dev/memo'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlankRoute: typeof BlankRoute
  DevAsyncRenderingRoute: typeof DevAsyncRenderingRoute
  DevMemoRoute: typeof DevMemoRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/blank': {
      id: '/blank'
      path: '/blank'
      fullPath: '/blank'
      preLoaderRoute: typeof BlankRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dev/memo': {
      id: '/dev/memo'
      path: '/dev/memo'
      fullPath: '/dev/memo'
      preLoaderRoute: typeof DevMemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dev/async-rendering': {
      id: '/dev/async-rendering'
      path: '/dev/async-rendering'
      fullPath: '/dev/async-rendering'
      preLoaderRoute: typeof DevAsyncRenderingRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlankRoute: BlankRoute,
  DevAsyncRenderingRoute: DevAsyncRenderingRoute,
  DevMemoRoute: DevMemoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
